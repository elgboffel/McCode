//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.5.96
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace McCode.Web.Models.ModelsBuilder
{
	// Mixin content Type 1132 with alias "CompositionOpenGraph"
	/// <summary>Open Graph</summary>
	public partial interface ICompositionOpenGraph : IPublishedContent
	{
		/// <summary>#Description</summary>
		string OgDescription { get; }

		/// <summary>#Images</summary>
		IEnumerable<IPublishedContent> OgImages { get; }

		/// <summary>#Title</summary>
		string OgTitle { get; }

		/// <summary>#Type</summary>
		string OgType { get; }
	}

	/// <summary>Open Graph</summary>
	[PublishedContentModel("CompositionOpenGraph")]
	public partial class CompositionOpenGraph : PublishedContentModel, ICompositionOpenGraph
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "CompositionOpenGraph";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CompositionOpenGraph(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CompositionOpenGraph, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// #Description: A one to two sentence description of your object.
		///</summary>
		[ImplementPropertyType("ogDescription")]
		public string OgDescription
		{
			get { return GetOgDescription(this); }
		}

		/// <summary>Static getter for #Description</summary>
		public static string GetOgDescription(ICompositionOpenGraph that) { return that.GetPropertyValue<string>("ogDescription"); }

		///<summary>
		/// #Images: An image/images which should represent your object within the graph.
		///</summary>
		[ImplementPropertyType("ogImages")]
		public IEnumerable<IPublishedContent> OgImages
		{
			get { return GetOgImages(this); }
		}

		/// <summary>Static getter for #Images</summary>
		public static IEnumerable<IPublishedContent> GetOgImages(ICompositionOpenGraph that) { return that.GetPropertyValue<IEnumerable<IPublishedContent>>("ogImages"); }

		///<summary>
		/// #Title: The title of your object as it should appear within the graph, e.g., "The Rock". See http://ogp.me/
		///</summary>
		[ImplementPropertyType("ogTitle")]
		public string OgTitle
		{
			get { return GetOgTitle(this); }
		}

		/// <summary>Static getter for #Title</summary>
		public static string GetOgTitle(ICompositionOpenGraph that) { return that.GetPropertyValue<string>("ogTitle"); }

		///<summary>
		/// #Type: See http://ogp.me/#types for exsamples
		///</summary>
		[ImplementPropertyType("ogType")]
		public string OgType
		{
			get { return GetOgType(this); }
		}

		/// <summary>Static getter for #Type</summary>
		public static string GetOgType(ICompositionOpenGraph that) { return that.GetPropertyValue<string>("ogType"); }
	}
}
