@inherits UmbracoViewPage<CollapseMenuViewModel>
@using Umbraco.Web;

@{ 
    Html
        .RequiresJs("~/Content/components/react/react.min.js", 1, 2, new { @defer = string.Empty })
        .RequiresJs("~/Content/components/react/react-dom.min.js", 1, 2, new { @defer = string.Empty })
        .RequiresJs("~/Content/components/axios/dist/axios.min.js", 1, 2, new { @defer = string.Empty })
        .RequiresJs("~/scripts/dist/app/components/collapse-menu.js", 1, 2, new { @defer = string.Empty });

    var rootChildren = Model.StartNode.Children()
.Where(x => x.IsVisible());
}

@if (rootChildren.Any())
{
    <nav class="collapse-menu" role="navigation">
        @renderChildren(rootChildren)
    </nav>
}


@helper renderChildren(IEnumerable<IPublishedContent> children)
{
    foreach (var page in children)
    {
        @renderPage(page)
    }
}

@helper renderPage(IPublishedContent content)
{ 
    var resetLevel = content.Level - Model.StartNode.Level;
    var isAncestor = content.IsAncestorOrSelf(Model.StartNode);
    var expanderType = resetLevel != 1 ? "slide" : "expand";
    var children = content.Children;

    <li class="collapse-menu__section @Umbraco.If(isAncestor, "collapse-menu__ancestor")">
        <a href="@content.Url">@content.UrlName @resetLevel</a>
        @if (children.Any())
        {
            <button role="button" class="collapse-menu__btn collapse-menu__@(expanderType)">Get</button>
             <ul class="collapse-menu__children">
                @if (content.Level <= Model.MaxLevelsRendered)
                {
                    @renderChildren(children)
                }
            </ul>
        }
    </li>
}


