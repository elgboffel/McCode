@inherits UmbracoViewPage<SidebarViewModel>
@using Danva.Web.Models.PartialModels
@using Danva.Web.Models.ComponentModels


@using Our.Umbraco.LinksPicker.Models

@{
    var page = Model.CurrentPage;
    var searchPage = page.AncestorOrSelf<Website>().Children<SearchPage>().FirstOrDefault();
    var primaryTags = page.GetPropertyValue("primaryTags", Enumerable.Empty<IPublishedContent>());
    var secondaryTags = page.GetPropertyValue("secondaryTags", Enumerable.Empty<IPublishedContent>());

}

@if (Model.Layout != null)
{
    <div class="sidebar">
        @if(!string.IsNullOrEmpty(Model.Headline))
        {
            <h3>@Model.Headline</h3>
        }

        @foreach (var item in Model.Layout)
        {
            switch (item.DocumentTypeAlias)
            {
                case "themeBox":
                    @renderThemebox(item) break;

                case "sidebarEmployee":
                    @renderContact(item) break;
            }
        }

        <div class="tags">
            @if (primaryTags.Any())
            {
                    foreach (var tag in primaryTags)
                    {
                        <a class="primary-tag" href="@(searchPage.UrlAbsolute() + "?q=" + @tag.Id)">@tag.Name</a>
                    }
                    <div class="spacer25"></div>
            }
            @if (secondaryTags.Any())
            {
                    foreach (var tag in secondaryTags)
                    {
                        <a class="secondary-tag" href="@(searchPage.UrlAbsolute() + "?q=" + @tag.Id)">@tag.Name</a>
                    }
                    <div class="spacer25"></div>
            }
        </div>
    </div>
}

@helper renderThemebox(IPublishedContent themebox)
{
    var contentPicker = themebox.GetPropertyValue("contentPicker", Enumerable.Empty<IPublishedContent>());
    <div class="factbox">
        <div class="line-border-thick-skew-right"></div>
        <div class="factbox-inner">
            @if (themebox.HasValue("headline"))
            {
                <small class="trompet">@Html.Raw(themebox.GetPropertyValue("trompet", ""))</small>
            }
            @if (themebox.HasValue("headline"))
            {
                <h4 class="factbox-headline">@Html.Raw(themebox.GetPropertyValue("headline"))</h4>
            }
            @if (themebox.HasValue("content"))
            {
                @Html.Raw(themebox.GetPropertyValue<string>("content"))
            }
            @if (contentPicker.Any())
            {
                <ul class="link-list">
                    @foreach (var content in contentPicker)
                    {
                        <li><a href="@content.Url">@Html.Raw(content.GetPropertyValue("headline", content.GetPropertyValue<string>("teaserHeadline", content.Name)))</a></li>
                    }
                </ul>
            }
            <div class="factbox-spacer"></div>
        </div>
    </div>
}

@helper renderContact(IPublishedContent contact)
{
    var pickedContact = contact.GetPropertyValue("pickEmployee", Enumerable.Empty<IPublishedContent>()).FirstOrDefault();

    if (contact.HasValue("headline"))
    {
            <h4 class="contact-headline">@Html.Raw(contact.GetPropertyValue<string>("headline", ""))</h4>
    }
    if (pickedContact != null)
    {

        @Html.Partial(
            "Components/_ContactCard",
            new ContactCardViewModel
            {
                Image = pickedContact.GetPropertyValue("image", Enumerable.Empty<IPublishedContent>()).FirstOrDefault(),
                TypedWidth = 200,
                ImageHeight = 200,
                ImageHeightMobile = 400,
                Name = pickedContact.Name,
                Title = pickedContact.GetPropertyValue<string>("title", ""),
                Phone = pickedContact.GetPropertyValue<string>("phone", ""),
                Mobile = pickedContact.GetPropertyValue<string>("mobilePhone", ""),
                Mail = pickedContact.GetPropertyValue<string>("mail", "")
            }
        )
    }
}
